flowchart LR
    ECSC --> conwayCertsTransition
        conwayCertsTransition --> certificates{isEmpty certificates}
        certificates --> |True| cctDoBlock[do]
            cctDoBlock --> validateZeroRewards(validateZeroRewards)
            cctDoBlock --> certStateWithDrepExiryUpdated[(certStateWithDrepExiryUpdated)]

        certificates --> |False| sizeCheck{size > 1}
            sizeCheck --> |True| conwayCertsTransition
            sizeCheck --> |False| ECC[EraRule CERT Conway]
                ECC --> certTransition
                certTransition --> |ConwayTxCertDeleg| EDC[EraRule DELEG Conway]
                    EDC --> conwayDelegTransition
                        conwayDelegTransition --> |ConwayRegCert| crcDoBlock[do]
                            crcDoBlock --> crcCheckDepositAgaintPParams(checkDespoitAgainstPParams)
                            crcDoBlock --> crcCheckStakeKeyNotRegistered(checkStakeKeyNotRegistered)
                        conwayDelegTransition --> |ConwayUnregCert| cucDoBlock[do]
                            cucDoBlock --> checkInvalidRefund(checkInvalidRefund)
                            cucDoBlock --> mUMElem(isJust mUMElem)
                            cucDoBlock --> cucCheckStakeKeyHasZeroRewardBalance(checkStakeKeyHasZeroRewardBalance)
                        conwayDelegTransition --> |ConwayDelegCert| cdcDoBlock[do]
                            cdcDoBlock --> checkStakeKeyIsRegistered(checkStakeKeyIsRegistered)
                            cdcDoBlock --> checkStakeDelegateeRegistered(checkStakeDelegateeRegistered)
                        conwayDelegTransition --> |ConwayRegDelegCert| crdcDoBlock[do]
                            crdcDoBlock --> checkDepositAgainstPParams(checkDepositAgainstPParams)
                            crdcDoBlock --> checkStakeKeyNotRegistered(checkStakeKeyNotRegistered)
                            crdcDoBlock --> checkStakeKeyZeroRewardBalance(checkStakeKeyHasZeroRewardBalance)
                certTransition --> EPC[EraRule POOL Conway]
                    EPC --> EPS[EraRule POOL Shelley]
                    EPS --> poolDelegationTransition
                        poolDelegationTransition --> |regPool| rpDoBlock[do]
                            rpDoBlock --> actualNetId(actualNetId == suppliedNetId)
                            rpDoBlock --> pmHash(length pmHash <= sizeHash)
                            rpDoBlock --> ppCost(ppCost >= minPoolCost)
                            rpDoBlock --> ppId{ppId ∉ dom psStakePoolParams}
                                ppId --> |True| payPoolDeposit --> psDeposits[(psDeposits)]
                                ppId --> |False| psFutureStakePoolParams[(psFutureStakePoolParams, psRetiring)]
                        poolDelegationTransition --> |RetirePool| retirePoolDoBlock[do]
                            retirePoolDoBlock --> hk(hk ∈ dom psStakePoolParams)
                            retirePoolDoBlock --> cEpoch(cEpoch < e && e <= limitEpoch)
                            retirePoolDoBlock --> psRetiring[(psRetiring)]
                certTransition --> EGOVERTC[EraRule GOVERT Conway]
                    EGOVERTC --> conwayGovCertTransition
                    conwayGovCertTransition --> |ConwayRegDRep| crdrDoBlock[do]
                        crdrDoBlock --> notMemberCredVsDReps(Map.notMember cred vsDReps)
                        crdrDoBlock --> deposit(deposit == ppDRepDeposit)
                        crdrDoBlock --> crdrDRepState[(dRepState)]
                    conwayGovCertTransition --> |ConwayUnregDRep| curdrDoBlock[do]
                        curdrDoBlock --> mDRepState(isJust mDRepState)
                        curdrDoBlock --> drepRefundMismatch(failOnJust drepRefundMismatch)
                        curdrDoBlock --> curdrDRepState[(dRepState)]
                    conwayGovCertTransition -->|ConwayUpdateDRep| cudrDoBlock[do]
                        cudrDoBlock --> memberCredVsDreps(Map.member cred vsDReps)
                        cudrDoBlock --> cudrDRepState[(vsDReps)]
                    conwayGovCertTransition --> |ConwayResignCommitteeColdKey| crcckDoBlock[do]
                    conwayGovCertTransition --> |ConwayAuthCommitteeHotKey| cachkDoBlock[do]
                        crcckDoBlock --> checkAndOverwriteCommitteMemberState
                        cachkDoBlock --> checkAndOverwriteCommitteMemberState
                            checkAndOverwriteCommitteMemberState --> coldCredResigned(failOnJust coldCredResigned)
                            checkAndOverwriteCommitteMemberState --> isCurrentMember(isCurrentMember OR isPotentialFutureMember)
                            checkAndOverwriteCommitteMemberState --> vsCommitteeState[(vsCommitteeState)]
